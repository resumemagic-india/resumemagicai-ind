
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Download, Sparkles, TrendingUp, BookOpen, Award, Calendar, Lightbulb } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

interface CareerRoadmapAnalysisProps {
  analysis: string;
  timeframe: string;
}

export const CareerRoadmapAnalysis = ({ analysis, timeframe }: CareerRoadmapAnalysisProps) => {
  const { toast } = useToast();
  const [isPrinting, setIsPrinting] = useState(false);
  
  // Parse sections from the analysis text
  const sections = parseAnalysisSections(analysis);
  
  const handlePrint = () => {
    setIsPrinting(true);
    
    // Create a printable version of the content
    const printContent = document.createElement('div');
    printContent.innerHTML = `
      <html>
        <head>
          <title>Career Roadmap Analysis - ${timeframe} Year Plan</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
            }
            h1 {
              color: #4338ca;
              font-size: 24px;
              margin-bottom: 16px;
            }
            h2 {
              color: #6d28d9;
              font-size: 20px;
              margin-top: 24px;
              margin-bottom: 12px;
              border-bottom: 1px solid #e5e7eb;
              padding-bottom: 8px;
            }
            p {
              margin-bottom: 16px;
            }
            .badge {
              background-color: #f3f4f6;
              padding: 4px 8px;
              border-radius: 4px;
              font-size: 14px;
              margin-right: 6px;
              margin-bottom: 6px;
              display: inline-block;
            }
            .section {
              margin-bottom: 24px;
            }
            .footer {
              margin-top: 40px;
              text-align: center;
              font-size: 12px;
              color: #6b7280;
            }
          </style>
        </head>
        <body>
          <h1>Career Roadmap Analysis - ${timeframe} Year Plan</h1>
          <p>Generated by ResumeMagic AI on ${new Date().toLocaleDateString()}</p>
          
          ${Object.entries(sections).map(([key, content]) => {
            if (!content) return '';
            const title = formatSectionTitle(key);
            return `
              <div class="section">
                <h2>${title}</h2>
                <div>${formatContent(content)}</div>
              </div>
            `;
          }).join('')}
          
          <div class="footer">
            <p>Â© ${new Date().getFullYear()} ResumeMagic AI - This analysis is based on current industry trends and may evolve over time.</p>
          </div>
        </body>
      </html>
    `;

    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.open();
      printWindow.document.write(printContent.innerHTML);
      printWindow.document.close();
      
      printWindow.onload = () => {
        printWindow.print();
        printWindow.onafterprint = () => {
          printWindow.close();
          setIsPrinting(false);
        };
      };
    } else {
      setIsPrinting(false);
      toast({
        title: "Print failed",
        description: "Please allow pop-ups for this site to print your analysis",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold text-white flex items-center gap-2">
            <TrendingUp className="h-6 w-6 text-blue-400" />
            <span>Your {timeframe}-Year Career Roadmap</span>
          </h2>
          <p className="text-white/60 mt-1">
            Based on your resume and current industry trends
          </p>
        </div>
        
        <Button 
          variant="outline" 
          className="bg-white/5 hover:bg-white/10 border-white/10 text-white"
          onClick={handlePrint}
          disabled={isPrinting}
        >
          {isPrinting ? (
            <>Processing...</>
          ) : (
            <>
              <Download className="mr-2 h-4 w-4" />
              Save as PDF
            </>
          )}
        </Button>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {sections.summary && (
          <Card className="col-span-full bg-white/5 backdrop-blur-sm border border-white/10 overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 border-b border-white/10">
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-blue-400" />
                <span>Career Summary</span>
              </CardTitle>
              <CardDescription className="text-white/60">
                Overview of your career trajectory
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6 text-white/80 leading-relaxed">
              <div dangerouslySetInnerHTML={{ __html: formatContent(sections.summary) }} />
            </CardContent>
          </Card>
        )}
        
        {sections.skills && (
          <Card className="md:col-span-1 bg-white/5 backdrop-blur-sm border border-white/10 overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-emerald-900/30 to-cyan-900/30 border-b border-white/10">
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-emerald-400" />
                <span>Skills to Develop</span>
              </CardTitle>
              <CardDescription className="text-white/60">
                Key skills for your future success
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="space-y-4 text-white/80">
                <div dangerouslySetInnerHTML={{ __html: formatContent(sections.skills) }} />
              </div>
            </CardContent>
          </Card>
        )}
        
        {sections.opportunities && (
          <Card className="md:col-span-1 bg-white/5 backdrop-blur-sm border border-white/10 overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-purple-900/30 to-indigo-900/30 border-b border-white/10">
              <CardTitle className="flex items-center gap-2">
                <Award className="h-5 w-5 text-purple-400" />
                <span>Opportunities</span>
              </CardTitle>
              <CardDescription className="text-white/60">
                Potential paths and roles to explore
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="space-y-4 text-white/80">
                <div dangerouslySetInnerHTML={{ __html: formatContent(sections.opportunities) }} />
              </div>
            </CardContent>
          </Card>
        )}
        
        {sections.timeline && (
          <Card className="md:col-span-1 bg-white/5 backdrop-blur-sm border border-white/10 overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-amber-900/30 to-orange-900/30 border-b border-white/10">
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-amber-400" />
                <span>Timeline</span>
              </CardTitle>
              <CardDescription className="text-white/60">
                Suggested roadmap over {timeframe} years
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="space-y-4 text-white/80">
                <div dangerouslySetInnerHTML={{ __html: formatContent(sections.timeline) }} />
              </div>
            </CardContent>
          </Card>
        )}
        
        {sections.recommendations && (
          <Card className="col-span-full bg-white/5 backdrop-blur-sm border border-white/10 overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-blue-900/30 to-cyan-900/30 border-b border-white/10">
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-yellow-400" />
                <span>Recommendations</span>
              </CardTitle>
              <CardDescription className="text-white/60">
                Specific actions to take for your career development
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="space-y-4 text-white/80">
                <div dangerouslySetInnerHTML={{ __html: formatContent(sections.recommendations) }} />
              </div>
            </CardContent>
          </Card>
        )}
      </div>
      
      <div className="flex justify-center mt-12">
        <div className="text-center text-white/60 text-sm max-w-2xl">
          <p>
            This analysis is based on current industry trends and may evolve over time. 
            We recommend revisiting your career roadmap periodically as the job market changes.
          </p>
        </div>
      </div>
    </div>
  );
};

// Helper functions to parse and format the AI response
function parseAnalysisSections(analysisText: string) {
  const sections: Record<string, string> = {
    summary: '',
    skills: '',
    opportunities: '',
    timeline: '',
    recommendations: ''
  };
  
  // Try to extract sections from the analysis text
  // These regex patterns look for section headers and capture content until the next header
  const summaryMatch = analysisText.match(/(?:career\s+summary|summary|overview)(?:\s*:|:?\s*\n)([\s\S]*?)(?=(?:\n\s*##?\s+[a-z]+|\n\s*skills|opportunities|timeline|recommendations|$))/i);
  const skillsMatch = analysisText.match(/(?:skills\s+to\s+develop|key\s+skills|skills)(?:\s*:|:?\s*\n)([\s\S]*?)(?=(?:\n\s*##?\s+[a-z]+|\n\s*opportunities|timeline|recommendations|$))/i);
  const opportunitiesMatch = analysisText.match(/(?:opportunities|potential\s+roles|career\s+paths)(?:\s*:|:?\s*\n)([\s\S]*?)(?=(?:\n\s*##?\s+[a-z]+|\n\s*timeline|recommendations|$))/i);
  const timelineMatch = analysisText.match(/(?:timeline|roadmap)(?:\s*:|:?\s*\n)([\s\S]*?)(?=(?:\n\s*##?\s+[a-z]+|\n\s*recommendations|$))/i);
  const recommendationsMatch = analysisText.match(/(?:recommendations|action\s+items|next\s+steps)(?:\s*:|:?\s*\n)([\s\S]*?)(?=$)/i);
  
  if (summaryMatch) sections.summary = summaryMatch[1].trim();
  if (skillsMatch) sections.skills = skillsMatch[1].trim();
  if (opportunitiesMatch) sections.opportunities = opportunitiesMatch[1].trim();
  if (timelineMatch) sections.timeline = timelineMatch[1].trim();
  if (recommendationsMatch) sections.recommendations = recommendationsMatch[1].trim();
  
  // If we couldn't extract structured sections, just put everything in summary
  if (!sections.summary && !sections.skills && !sections.opportunities && 
      !sections.timeline && !sections.recommendations) {
    sections.summary = analysisText;
  }
  
  return sections;
}

function formatSectionTitle(key: string): string {
  switch (key) {
    case 'summary': return 'Career Summary';
    case 'skills': return 'Skills to Develop';
    case 'opportunities': return 'Opportunities';
    case 'timeline': return 'Timeline';
    case 'recommendations': return 'Recommendations';
    default: return key.charAt(0).toUpperCase() + key.slice(1);
  }
}

function formatContent(content: string): string {
  if (!content) return '';
  
  // Handle markdown-style formatting
  let formattedContent = content
    // Replace markdown headers with HTML headers
    .replace(/^###\s+(.*?)$/gm, '<h4 class="text-lg font-medium text-white/90 mt-4 mb-2">$1</h4>')
    .replace(/^##\s+(.*?)$/gm, '<h3 class="text-xl font-medium text-white/90 mt-5 mb-2">$1</h3>')
    .replace(/^#\s+(.*?)$/gm, '<h2 class="text-2xl font-medium text-white/90 mt-6 mb-3">$1</h2>')
    
    // Replace markdown lists with HTML lists
    .replace(/^\*\s+(.*?)$/gm, '<li class="ml-5 list-disc text-white/80 mb-1">$1</li>')
    .replace(/^-\s+(.*?)$/gm, '<li class="ml-5 list-disc text-white/80 mb-1">$1</li>')
    .replace(/^\d+\.\s+(.*?)$/gm, '<li class="ml-5 list-decimal text-white/80 mb-1">$1</li>')
    
    // Replace markdown emphasis with HTML emphasis
    .replace(/\*\*(.*?)\*\*/g, '<strong class="font-medium">$1</strong>')
    .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
    
    // Add paragraph tags to text blocks
    .replace(/\n\n/g, '</p><p class="mb-4">')
    
    // Create badges for skills (text in backticks)
    .replace(/`([^`]+)`/g, '<span class="inline-block bg-white/10 text-purple-200 px-2 py-1 rounded-md text-xs font-medium mr-2 mb-2">$1</span>');
  
  // Wrap in paragraph if not already wrapped
  if (!formattedContent.startsWith('<')) {
    formattedContent = `<p class="mb-4">${formattedContent}</p>`;
  }
  
  // Fix any adjacent list items to be in a proper list
  formattedContent = formattedContent
    .replace(/<\/li>\s*<li/g, '</li><li')
    .replace(/(<li.*?<\/li>)+/g, (match) => `<ul class="my-3">${match}</ul>`);
  
  return formattedContent;
}
